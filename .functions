# Git version bump
function bump() {
  git commit -m "Bump to $1" && git tag -a $1 -m "Bump version $1"
}

# Git stash access
function sts() { git stash save "$1" }
function sta() { git stash apply stash@{$1} }
function stl() { git stash list }
function std() { git stash drop stash@{$1} }

# Start an HTTP server from a directory, optionally specifying the port
function server() {
  local port="${1:-8000}";
  sleep 1 && open "http://localhost:${port}/" &
  # Set the default Content-Type to `text/plain` instead of `application/octet-stream`
  # And serve everything as UTF-8 (although not technically correct, this doesnâ€™t break anything for binary files)
  python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port";
}

# Kill whatever is happening on a given port
function killport() {
  if [ -z "$1" ]; then
    echo "Usage: killport [numeric port identifier]" >&2
    return 1
  fi
  lsof -i TCP:$1 | awk '/LISTEN/{print $2}' | xargs kill -9
  echo "Port" $1 "found and killed."
}

# Quick branch off with prefix
function branch() {
  git checkout -b jh-$1
}

# Work on a repo project
# Opens in Sublime, CDs in, git statuses
function workon() {
  repos;
  cd $1;

  if [ $(git rev-parse --is-inside-work-tree 2>/dev/null) ]; then
    git status;
    openrepo
  fi;

  subl --add $PWD;
}

# Open the remote origin, probably github
function openrepo() {
  if [ $(git rev-parse --is-inside-work-tree 2>/dev/null) ]; then
    origin_remote="$(git config --get remote.origin.url)"

    if [[ $origin_remote =~ "https://" ]]; then
      # Great! Open the HTTPS address
    else;
      origin_remote=${origin_remote/git@/"https://"}
      origin_remote=${origin_remote/com:/"com/"}
    fi;

    open -a "Firefox Developer Edition" $origin_remote
  fi;
}

# Add a repo to sublime
function subladd() {
  subl --add "/Users/jody/Downloads/Repositories/$1";
}

function git {
  if [[ "$1" == "push" ]]; then
    force=false
    override=false

    for param in "$@"; do
      if [[ $param == "--force" ]]; then force=true; fi
      if [[ $param == "--seriously" ]]; then override=true; fi
    done

    if [[ "$force" = true && "$override" = false ]]; then
      echo -e "\033[0;33mDetected use of --force! Using --force-with-lease instead. If you're absolutely sure you can override with --force --seriously.\033[0m"

      for param; do
        [[ "$param" = --force ]] || set -- "$@" "$param"; shift
      done

      set -- "push" "$@" "--force-with-lease"; shift
    else
      if [[ "$override" = true ]]; then
        echo -e "\033[0;33mHeads up! Using --force and not --force-with-lease.\033[0m"
      fi

      for param; do
        [[ "$param" = --seriously ]] || set -- "$@" "$param"; shift
      done
    fi
  fi

  command git "$@"
}
